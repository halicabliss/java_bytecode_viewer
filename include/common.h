#ifndef COMMON_H
#define COMMON_H

#include <stdint.h> 
#include <stdio.h> 
extern uint16_t constant_pool_count_global;

enum {
    ACC_PUBLIC       = 0x0001, // Declared public.
    ACC_PRIVATE      = 0x0002, // Declared private (Field, Method only).
    ACC_PROTECTED    = 0x0004, // Declared protected (Field, Method only).
    ACC_STATIC       = 0x0008, // Declared static (Field, Method only).
    ACC_FINAL        = 0x0010, // Declared final.
    ACC_SYNTHETIC    = 0x1000, // Declared synthetic; not present in the source code.
    ACC_ENUM         = 0x4000, // Declared as an element of an enum class or type.

    // ClassFile Specific
    ACC_SUPER        = 0x0020, // Treat superclass methods specially when invoked by invokespecial.
    ACC_INTERFACE    = 0x0200, // Declared an interface, not a class.
    ACC_ABSTRACT     = 0x0400, // Declared abstract.
    ACC_ANNOTATION   = 0x2000, // Declared as an annotation type.
    ACC_MODULE       = 0x8000, // Declared as a module.

    // Field Specific
    ACC_VOLATILE     = 0x0040, // Declared volatile.
    ACC_TRANSIENT    = 0x0080, // Declared transient.

    // Method Specific
    ACC_SYNCHRONIZED = 0x0020, // Declared synchronized.
    ACC_BRIDGE       = 0x0040, // A bridge method generated by a compiler.
    ACC_VARARGS      = 0x0080, // Declared with variable number of arguments.
    ACC_NATIVE       = 0x0100, // Declared native.
    ACC_STRICT       = 0x0800  // Declared strictfp.


};


// Swap big endian <-> little endian
#define SWAP_U16(x) (((x) >> 8) | ((x) << 8))
#define SWAP_U32(x) ((((x) & 0xFF000000) >> 24) | \
                     (((x) & 0x00FF0000) >> 8)  | \
                     (((x) & 0x0000FF00) << 8)  | \
                     (((x) & 0x000000FF) << 24))




uint16_t read_u16(FILE *fp);

uint32_t read_u32(FILE *fp);

#endif